#include <SPI.h>
#include <Adb.h>
//#include <PWM.h>
Connection * connection;
//int32_t frequency = 400; //frequency (in Hz) 
//bool pwm_ok = false;
int pinPWM  = 9;

void adbEventHandler(Connection * connection, adb_eventType event, uint16_t length, uint8_t * data)
{
  if (event == ADB_CONNECTION_RECEIVE)   // Если приняли данные
  {
    byte val = 0;
    for (int i = 0; i <= 11; i++){ 
      val = data[i];
      if (i==0 || i==3 || i==6 || i==9) {
        if (val == 0){
          val = 0;
        } else if (val == 1) {
          val = 222;
        } else if (val == 2) {
          val = 224;
        } else if (val == 3) {
          val = 226;
        } else if (val == 4) {
          val = 228;
        } else if (val == 5) {
          val = 230;
        } else if (val == 6) {
          val = 232;
        } else if (val == 7) {
          val = 234;
        } else if (val == 8) {
          val = 236;
        } else if (val == 9) {
          val = 238;
        } else if (val == 10) {
          val = 255;
        };
        
        pinPWM = 13-(i/3);
        
        if (val == 255){
          digitalWrite(pinPWM, 1);
        } else {
//          if (pwm_ok){
//            pwmWrite(pinPWM, val);
//          } else {
            analogWrite(pinPWM, val);
//          }
        };
        
      } else if (i==1 || i==4 || i==7 || i==10) {
        digitalWrite(9-((i-1)/3), val);
      } else if (i==2 || i==5 || i==8 || i==11) {
        digitalWrite(5-((i-2)/3), val);
      }
    }
    
/*    byte pin = 0;
    byte val = 0;
    for (int i = 0; i < length - 1; i++){ 
      if ((i+1)%2 == 0) {
        val = data[i];
//        if (pin == 3 || pin == 5 || pin == 6 || pin == 10 || pin == 11)
//        if (pin >=2 && pin <= 13)
        if (pin == 6)
        {
            analogWrite(pin, val);
        } else 
        {
          digitalWrite(pin, val);
        };
        pin = 0;
        val = 0;
      } else {
        pin = data[i];
      }
    }      */
  }
}
 
void setup()
{
/*  //initialize all timers except for 0, to save time keeping functions
  InitTimersSafe(); 

  //sets the frequency for the specified pin
  bool success = SetPinFrequencySafe(pinPWM, frequency);
  
  //if the pin frequency was set successfully, turn pin 13 on
  if(success) {
//    pinMode(13, OUTPUT);
//    digitalWrite(13, HIGH);    
    pwm_ok = true;
    
  }
*/

//pwm         rel1    rel2
//13,12,11,10 9,8,7,6 5,4,3,2
//(Timers 3, 4, 5  Oddly do not use the divisors the data sheet says: Below are actual measured values!)
  TCCR0B = (TCCR0B & 0xF8) | 0x01; //pin 4,13  PWM = 31KHz 
  TCCR1B = (TCCR1B & 0xF8) | 0x01; //pin 11,12 PWM = 31KHz 
  TCCR2B = (TCCR2B & 0xF8) | 0x01; //pin 9,10  PWM = 31KHz 
//  TCCR3B = (TCCR3B & 0xF8) | 0x01; //pin 2,3,5 PWM = 31KHz 
//  TCCR4B = (TCCR4B & 0xF8) | 0x01; //pin 6,7,8 PWM = 31KHz 
  TCCR5B = (TCCR5B & 0xF8) | 0x01; //pin 44,45,46 PWM = 31KHz 
  
  ADB::init();
  connection = ADB::addConnection("tcp:4568", true, adbEventHandler);  
}
 
void loop()
{
  ADB::poll();
}
